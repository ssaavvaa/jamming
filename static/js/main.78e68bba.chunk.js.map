{"version":3,"sources":["Components/Track/Track.js","Components/Track/ClickEvents/removeTrack.js","Components/TrackList/TrackList.js","Components/Playlist/Playlist.js","Components/SearchResults/SearchResults.js","Components/SearchBar/SearchBar.js","util/spotify.js","App/App.js","Components/Track/ClickEvents/addTrack.js","serviceWorker.js","Reducers/Functions/Tracks.js","Reducers/rootReducer.js","index.js"],"names":["Track","id","this","props","removeTrack","react_default","a","createElement","className","name","preview","artist","album","song","src","img","btnAdd","onClick","onAdd","bind","onRemove","React","PureComponent","connect","state","playlistTracks","Tracks","dispatch","type","TrackList","_this","tracks","map","track","Components_Track_Track","key","Component","Playlist","defaultValue","Components_TrackList_TrackList","SearchResults","searchResults","SearchBar","placeholder","onSearch","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","concat","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","images","url","preview_url","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSearch","assertThisInitialized","addTrack","_this2","value","document","getElementById","res","setState","find","react_scroll_up_button","Components_SearchBar_SearchBar","Components_SearchResults_SearchResults","Playlist_Playlist_Playlist","playlistName","Boolean","hostname","TracksState","rootReducer","combineReducers","arguments","undefined","action","index","findIndex","x","console","log","objectSpread","toConsumableArray","slice","update","store","createStore","devToolsExtension","ReactDOM","render","es","src_App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78e68bba.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport './Track.css';\r\nimport removeTrack from \"./ClickEvents/removeTrack\"\r\n\r\n\r\n\r\nclass Track extends React.PureComponent {\r\n\r\n\r\nonRemove(id){\r\n    return this.props.removeTrack(id)\r\n}\r\n\r\n\r\n  render(){\r\n  return (\r\n       <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n            <h3>{this.props.name}</h3>\r\n            <p>{this.props.preview}</p>\r\n            <p>{this.props.artist} | {this.props.album}</p>\r\n       </div>\r\n       <p>{this.props.song}</p>\r\n       <img className = \"image\" src = {this.props.img} />\r\n       <div className = \"playlist_add\">\r\n       <p >Add to play list</p>\r\n       {this.props.btnAdd === true?<button className=\"Track-action\" onClick = {this.props.onAdd.bind(this,this.props.id)}>+</button>:\r\n       <button className=\"Track-action\" onClick = {this.onRemove.bind(this,this.props.id)}>-</button>}\r\n       </div>\r\n     </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\n\r\nfunction mapStateToProps(state){\r\n  return {\r\n      playlistTracks:state.Tracks.playlistTracks\r\n    }\r\n  }\r\n\r\n  function mapDispatchToProps(dispatch){\r\n    return{ removeTrack: id => { dispatch(removeTrack(id)) } }\r\n  }\r\n\r\n  export default connect(mapStateToProps,mapDispatchToProps)(Track) ;\r\n","\r\n\r\nexport default function removeTrack(id){\r\n    return{\r\n        type:\"REMOVE_TRACK\",\r\n        id:id\r\n    }\r\n}","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from \"../Track/Track\"\r\n\r\nclass TrackList extends React.Component {\r\n\r\n  render(){\r\n  return (\r\n\r\n<div className = \"resultSearch\">\r\n   {this.props.tracks.map(track =>  <Track onAdd={this.props.onAdd}  key = {track.id}  id= {track.id}\r\n     btnAdd={this.props.btnAdd} song = {track.song} img={track.img}  name = {track.name} artist = {track.artist} album = {track.album}/>)}\r\n</div>\r\n\r\n  );\r\n}\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from \"../TrackList/TrackList\"\r\n\r\n\r\n\r\nexport default class Playlist extends React.Component {\r\n\r\n  render(){\r\n  return (\r\n<div className=\"Playlist\">\r\n  <input defaultValue={\"New Playlist\"}/>\r\n  <TrackList  tracks ={this.props.playlistTracks} />\r\n  <button className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n</div>\r\n  );\r\n}\r\n}\r\n","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from \"../TrackList/TrackList\"\r\n\r\n\r\n\r\nclass SearchResults extends React.Component {\r\n  render(){\r\n\r\n  return (\r\n\r\n     <div className = \"wrapper_search\">\r\n     <div className=\"SearchContainer\">\r\n    {!this.props.searchResults === false?\r\n     <TrackList  onAdd = {this.props.onAdd} btnAdd = {true}  tracks={this.props.searchResults}  />:\r\n     <div className={\"no_results-message\"}>Nothing has been found with your Search request</div>}\r\n     </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n  export default SearchResults ;\r\n","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n  render(){\r\n  return (\r\n<div className=\"SearchBar\">\r\n  <input placeholder=\"Enter A Song, Album, or Artist\" id=\"searchValue\" />\r\n  <button className=\"SearchButton\" onClick = {this.props.onSearch}>SEARCH</button>\r\n</div>\r\n  );\r\n}\r\n}\r\n\r\nexport default SearchBar;","const clientId = 'b2c5900815984920b0af23be399fbd54'; // Insert client ID here.\r\nconst redirectUri = 'https://ssaavvaa.github.io/jamming/'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\r\n\r\nexport let accessToken = \"\";\r\n\r\nexport const Spotify = {\r\n  getAccessToken() {\r\n    if (accessToken) {\r\n      return accessToken;\r\n    }\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n    if (accessTokenMatch && expiresInMatch) {\r\n      accessToken = accessTokenMatch[1];\r\n      const expiresIn = Number(expiresInMatch[1]);\r\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\r\n      return accessToken;\r\n    } else {\r\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n      window.location = accessUrl;\r\n    }\r\n  },\r\n\r\n  search(term) {\r\n    const accessToken = Spotify.getAccessToken();\r\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`\r\n      }\r\n    }).then(response => {\r\n      return response.json();\r\n    }).then(jsonResponse => {\r\n      if (!jsonResponse.tracks) {\r\n        return [];\r\n      }\r\n      return jsonResponse.tracks.items.map(track => ({\r\n        id: track.id,\r\n        name: track.name,\r\n        artist: track.artists[0].name,\r\n        album: track.album.name,\r\n        uri: track.uri,\r\n        img:track.album.images[1].url,\r\n        song:track.preview_url\r\n      }));\r\n    });\r\n  },\r\n\r\n  savePlaylist(name, trackUris) {\r\n    if (!name || !trackUris.length) {\r\n      return;\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken();\r\n    const headers = { Authorization: `Bearer ${accessToken}` };\r\n    let userId;\r\n\r\n    return fetch('https://api.spotify.com/v1/me', {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n      userId = jsonResponse.id;\r\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({name: name})\r\n      }).then(response => response.json()\r\n      ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({uris: trackUris})\r\n        });\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {connect} from 'react-redux'\nimport Playlist from \"../Components/Playlist/Playlist\"\nimport SearchResults from \"../Components/SearchResults/SearchResults\"\nimport SearchBar from \"../Components/SearchBar/SearchBar\"\nimport {Spotify, accessToken} from \"../util/spotify\"\nimport addTrack from \"../Components/Track/ClickEvents/addTrack\"\nimport $ from 'jquery'; \nimport {CircleArrow as ScrollUpButton} from \"react-scroll-up-button\";\n\n\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      searchResults:[],\n    }\n    this.handleSearch = this.handleSearch.bind(this)\n    this.addTrack = this.addTrack.bind(this)\n  }\n\n handleSearch(){\n  let value = document.getElementById(\"searchValue\").value\n   if(accessToken == \"\"){\n   return Spotify.getAccessToken()  \n   } else if(value !== null || value !== \"\"){\n      Spotify.search(value).then(res =>\n        res == null || res == \"\"?this.setState({searchResults:false}):\n                                this.setState({searchResults:res}))\n  }\n\n }\n\n addTrack(id){\n    const track = this.state.searchResults.find(track => track.id === id)\n    this.props.addTrack(track)\n  }\n\n\n\nrender(){\n\n  return (\n\n  <div className=\"App\">\n  <ScrollUpButton />\n    <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n    <SearchBar onSearch = {this.handleSearch} />\n    <div className=\"App-playlist\">\n      <SearchResults searchResults = {this.state.searchResults} onAdd = {this.addTrack} />\n      <Playlist playlistName = {this.state.playlistName}  playlistTracks={this.props.playlistTracks} />\n    </div>\n  </div>\n\n  );\n}\n}\n\nfunction mapStateToProps(state){\n  return {\n    playlistTracks:state.Tracks.playlistTracks\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return{ addTrack: id => { dispatch(addTrack(id)) } }\n}\n\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App) ;\n\n","export default function addTrack(id){\r\n    return{\r\n        type:\"ADD_TRACK\",\r\n        id:id\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\n\r\nconst TracksState = {\r\n    playlistTracks:[{name:\"kamukaze\",artist:\"Eminem\",album:\"loppo\", id:1},\r\n    {name:\"Back to Life\",artist:\"Linda\",album:\"Past\", id:2},\r\n    {name:\"Cigarette\",artist:\"Victor\",album:\"Tco alife\", id:3}],\r\n    btnAdd:true\r\n\r\n}\r\n\r\n\r\nexport default function Tracks(state = TracksState, action){\r\n    switch(action.type){\r\n        case \"REMOVE_TRACK\":\r\n        let index = state.playlistTracks.findIndex(x => x.id === action.id)\r\n        console.log(state.playlistTracks)\r\n        return {...state,playlistTracks:[...state.playlistTracks.slice(0, index),\r\n                                         ...state.playlistTracks.slice(index + 1)\r\n               ]};\r\n        case \"ADD_TRACK\":\r\n                const update = [...state.playlistTracks,action.id]\r\n        return {...state,playlistTracks:update};\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\n","import {combineReducers} from 'redux'\r\nimport Tracks from \"./Functions/Tracks\"\r\n\r\nconst rootReducer = combineReducers({\r\n    Tracks\r\n\r\n})\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport {createStore} from 'redux'\nimport rootReducer from './Reducers/rootReducer'\nimport $ from 'jquery'; \n\nconst store = createStore(rootReducer, window.devToolsExtension && window.devToolsExtension())\n\n\n\n\n\n\n\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}